#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Apr 29 14:47:21 2019

@author: kangsun

a python toolbox for downloading and subsetting narr data

update to subset grib file and save to mat file on 2019/04/30

updated on 2019/05/03 for large scale testing. the lat lon grids are slightly 
different (!!!) from pygrib and Nio
"""

import sys, os
import requests
import datetime
import numpy as np
from calendar import monthrange
# ditch pygrib because it did not really work for narr #import pygrib # I had to create a new environment to install pygrib

def check_file_status(filepath, filesize):
    sys.stdout.write('\r')
    sys.stdout.flush()
    size = int(os.stat(filepath).st_size)
    percent_complete = (size/filesize)*100
    sys.stdout.write('%.3f %s' % (percent_complete, '% Completed'))
    sys.stdout.flush()

def F_generate_filelist(file_collection_names,\
                        start_year,start_month,start_day,end_year,end_month,end_day):
    """
    generate a list of tar files two be downloaded from ncar rda website
    file_collection_names:
        a list of narr files, chosen from ['3D','sfc','flx','clm','pbl']
    y/m/d should be just numbers. the end date is excluded
    updated on 2019/04/29
    """
    collection_list = ['3D','sfc','flx','clm','pbl']
    date_start_list = [np.arange(1,28,3),np.array([1,10,20]),np.array([1,9,17,25]),\
                       np.array([1]),np.array([1,10,20])]
    start_date = datetime.date(start_year,start_month,start_day)
    end_date = datetime.date(end_year,end_month,end_day)
    
    days = (end_date-start_date).days
    DATES = [start_date + datetime.timedelta(days=d) for d in range(days)]
    fn_list = []
    for DATE in DATES:
        ystr = "%04d"%DATE.year
        mstr = "%02d"%DATE.month
        for file_collection_name in file_collection_names:
            date_start = date_start_list[collection_list.index(file_collection_name)]
            if DATE.day in date_start[0:-1]:
                d1str = "%02d"%DATE.day
                d2 = date_start[np.where(DATE.day == date_start)[0]+1][0]-1
                d2str = "%02d"%d2
            elif DATE.day == date_start[-1]:
                d1str = "%02d"%DATE.day
                d2 = monthrange(DATE.year,DATE.month)[-1]
                d2str = "%02d"%d2
            else:
                continue
            
            fn = '3HRLY/'+ystr+'/NARR'+file_collection_name+'_'+ystr+mstr+'_'+ \
            d1str+d2str+'.tar'
            fn_list = np.hstack((fn_list,fn))
    fn_list = np.ndarray.tolist(fn_list)
    return fn_list

def F_download_filelist(filelist,ret,savepath=''):
    """
    download narr files in filelist, a list generated from F_generate_list
    filelist:
        a list of file names, like ['3HRLY/2015/NARRsfc_201507_0109.tar']
    ret:
        a handle generated by 
            url = 'https://rda.ucar.edu/cgi-bin/login'
            values = {'email' : login_email, 'passwd' : login_password, 'action' : 'login'}
            ret = requests.post(url,data=values)
    savepath:
        path to save downloaded .tar files
    updated on 2019/04/29
    """
    cwd = os.getcwd()
    if savepath:
        os.chdir(savepath)
    
    dspath = 'http://rda.ucar.edu/data/ds608.0/'
    for file in filelist:
        filename=dspath+file
        file_base = os.path.basename(file)
        print('Downloading',file_base)
        req = requests.get(filename, cookies = ret.cookies, allow_redirects=True, stream=True)
        filesize = int(req.headers['Content-length'])
        with open(file_base, 'wb') as outfile:
            chunk_size=1048576
            for chunk in req.iter_content(chunk_size=chunk_size):
                outfile.write(chunk)
                if chunk_size < filesize:
                    check_file_status(file_base, filesize)
        #check_file_status(file_base, filesize)
        print()
    os.chdir(cwd)

def F_untar_filelist(filelist,savepath='',if_delete_tar=False):
    """
    untar the downloaded narr files. may delete .tar files after extraction
    filelist:
        a list of tar file names, like ['3HRLY/2015/NARRsfc_201507_0109.tar']
    savepath:
        path to save extracted .mat files
    updated on 2019/04/30
    """
    import tarfile
    cwd = os.getcwd()
    if savepath:
        os.chdir(savepath)
    for file in filelist:
        fn = savepath+file.split('/')[-1]
        print('untaring '+fn)
        tar = tarfile.open(fn)
        tar.extractall()
        tar.close()
        if if_delete_tar:
            print('deleting '+fn)
            os.remove(fn)
    os.chdir(cwd)    

def F_show_grib_variables(fn):
    """
    print out all variables in a grib file
    2019/05/03
    """
    import Nio
    f = Nio.open_file(fn,format='grib')
    varnames = f.variables.keys()
    for var in varnames:
        print(var)
    
def F_open_narr_grib(fn,narr_index_list,narr_name_list,if_save_coordinates=False):
    """
    open narr grib file, very difficult to determine the variable names
    fn:
        full path of grib file name
    narr_index_list:
        index of narr variables, can be found at https://rda.ucar.edu/datasets/ds608.0/#!docs
    narr_name_list:
        what you want to call those variables, have to be the same size as narr_index_list
    if_save_coordinate:
        True or False. The coordinates should be the same for all narr files
    extra packages:
        PyNIO, libiconv
    updated on 2019/05/01
    overhaul on 2019/05/02 to switch to PyNIO
    """
    import Nio
    f = Nio.open_file(fn,format='grib')
    narr = {}
    for ivar in range(len(narr_index_list)):
        narr_index = narr_index_list[ivar]
        narr_name = narr_name_list[ivar]
        value = f.variables[narr_index][:]
        if len(value.shape) == 3:# move vertical dimension to the end, after lat/lon
            value = np.transpose(value,(1,2,0))
        narr[narr_name] = np.asfortranarray(value)
        if ('lat' not in narr.keys()) and if_save_coordinates:
            narr['lat'] = np.asfortranarray(f.variables['gridlat_221'][:])
            narr['lon'] = np.asfortranarray(f.variables['gridlon_221'][:])
    return narr
#    import pygrib
#    narr_index_list = [str(x) for x in narr_index_list]
#    narr = {}
#    gribs = pygrib.open(fn)
#    for ivar in range(len(narr_index_list)):
#        narr_index = narr_index_list[ivar]
#        narr_name = narr_name_list[ivar]
#        grbmsg = gribs.select(parameterName=narr_index)
#        if len(grbmsg) == 1:
#            value,lat,lon = grbmsg[0].data()
#        else:
#            value = np.zeros((277,349,len(grbmsg)))
#            for ilayer in range(len(grbmsg)):
#                value[:,:,ilayer],lat,lon = grbmsg[ilayer].data()
#        value = np.asfortranarray(value,dtype=np.float32)
#        narr[narr_name] = value
#        if ('lat' not in narr.keys()) and if_save_coordinates:
#            lat = np.asfortranarray(lat,dtype=np.float32)
#            lon = np.asfortranarray(lon,dtype=np.float32)
#            narr['lat'] = lat
#            narr['lon'] = lon
#    return narr
    
def F_subset_grib_to_mat(grib_dir='',mat_dir='',\
                         startx_index_1based=1,endx_index_1based=349,\
                         starty_index_1based=1,endy_index_1based=277,\
                         if_delete_grib=False,if_save_coordinates=True):
    """
    open narr grib file, extract only useful information to mat files, and clean up
    grib_path:
        path where grib files are saved
    mat_path:
        path to save extracted .mat files
    start/endx/y_index_1based:
        subset narr data in space. default is to save all. The index is 1-based
    if_delete_grib:
        True or False, delete grib files or not
    if_save_coordinate:
        True or False, save lat/lon or not. The coordinates should be the same for all narr files
    updated on 2019/05/02
    extra packages:
        PyNIO, libiconv
    """
    import scipy.io
    import glob
    # grib content: https://rda.ucar.edu/datasets/ds608.0/docs/narr_grib.tab2
    # also https://rda.ucar.edu/datasets/ds608.0/#!docs
    # separate filelist
    flist_sfc = []
    flist_flx = []
    flist_3D = []
    flist_clm = []
    cwd = os.getcwd()
    os.chdir(grib_dir)
    filelist = glob.glob('merged_AWIP32*')
    for fn in filelist:
        fn_ext = fn[-3:]
        if fn_ext == 'sfc':
            flist_sfc = np.hstack((flist_sfc,fn))
        elif fn_ext == 'flx':
            flist_flx = np.hstack((flist_flx,fn))
        elif fn_ext == '.3D':
            flist_3D = np.hstack((flist_3D,fn))
        elif fn_ext == 'clm':
            flist_clm = np.hstack((flist_clm,fn))
    # process all sfc files
    # variable names in grib files, read by Nio
    narr_index_list = ['HPBL_221_SFC','PRES_221_SFC','TMP_221_SFC',\
                       'FRICV_221_SFC','SHTFL_221_SFC','LHTFL_221_SFC']
    # what do you want to call it, have to be same size as narr_index_list
    narr_name_list = ['PBLH','P_surf','T_surf',\
                      'u_star','sensible_heat','latent_heat']
    # remember to update flist_sfc/flx/3D
    for fn in flist_sfc:
        print('loading '+fn)
        narr = F_open_narr_grib(fn,narr_index_list,narr_name_list,\
                                if_save_coordinates=if_save_coordinates)
        narr = {k:v[starty_index_1based-1:endy_index_1based,\
                    startx_index_1based-1:endx_index_1based] for (k,v) in narr.items()}
        # like merged_AWIP32.2015070100.RS.sfc
        basename = os.path.basename(fn)
        ystr = basename[14:18]
        mstr = basename[18:20]
        dstr = basename[20:22]
        hstr = basename[22:24]
        # rember to change sfc/flx/3d...
        mat_fn = 'subset_sfc_'+dstr+'_'+hstr+'.mat'
        full_mat_dir = os.path.join(mat_dir,ystr,mstr)
        if not os.path.exists(full_mat_dir):
            os.makedirs(full_mat_dir)
        full_mat_path = os.path.join(full_mat_dir,mat_fn)
        scipy.io.savemat(full_mat_path,narr)
        if if_delete_grib:
            print('deleting '+fn)
            os.remove(fn)
    
    # process all flx files
    # variable names in grib files, read by Nio
    narr_index_list = ['PRES_221_TRO','HGT_221_TRO','U_GRD_221_HTGL',\
                       'V_GRD_221_HTGL']
    # what do you want to call it, have to be same size as narr_index_list
    narr_name_list = ['P_tropopause','GPH_tropopause','U_10m30m',\
                      'V_10m30m']
    # remember to update flist_sfc/flx/3D
    for fn in flist_flx:
        print('loading '+fn)
        narr = F_open_narr_grib(fn,narr_index_list,narr_name_list,\
                                if_save_coordinates=if_save_coordinates)
        narr = {k:v[starty_index_1based-1:endy_index_1based,\
                    startx_index_1based-1:endx_index_1based] for (k,v) in narr.items()}
        # like merged_AWIP32.2015070100.RS.sfc
        basename = os.path.basename(fn)
        ystr = basename[14:18]
        mstr = basename[18:20]
        dstr = basename[20:22]
        hstr = basename[22:24]
        # rember to change sfc/flx/3d...
        mat_fn = 'subset_flx_'+dstr+'_'+hstr+'.mat'
        full_mat_dir = os.path.join(mat_dir,ystr,mstr)
        if not os.path.exists(full_mat_dir):
            os.makedirs(full_mat_dir)
        full_mat_path = os.path.join(full_mat_dir,mat_fn)
        scipy.io.savemat(full_mat_path,narr)
        if if_delete_grib:
            print('deleting '+fn)
            os.remove(fn)
            
    # process all 3D files
    # variable names in grib files, read by Nio
    narr_index_list = ['HGT_221_ISBL','SPF_H_221_ISBL','TMP_221_ISBL',\
                       'TKE_221_ISBL','U_GRD_221_ISBL','V_GRD_221_ISBL']
    # what do you want to call it, have to be same size as narr_index_list
    narr_name_list = ['GPH','q','Temperature',\
                      'TKE','U','V']
    # remember to update flist_sfc/flx/3D
    for fn in flist_3D:
        print('loading '+fn)
        narr = F_open_narr_grib(fn,narr_index_list,narr_name_list,\
                                if_save_coordinates=if_save_coordinates)
        narr = {k:v[starty_index_1based-1:endy_index_1based,\
                    startx_index_1based-1:endx_index_1based] for (k,v) in narr.items()}
        # like merged_AWIP32.2015070100.3D
        basename = os.path.basename(fn)
        ystr = basename[14:18]
        mstr = basename[18:20]
        dstr = basename[20:22]
        hstr = basename[22:24]
        # rember to change sfc/flx/3d...
        mat_fn = 'subset_3D_'+dstr+'_'+hstr+'.mat'
        full_mat_dir = os.path.join(mat_dir,ystr,mstr)
        if not os.path.exists(full_mat_dir):
            os.makedirs(full_mat_dir)
        full_mat_path = os.path.join(full_mat_dir,mat_fn)
        scipy.io.savemat(full_mat_path,narr)
        if if_delete_grib:
            print('deleting '+fn)
            os.remove(fn)
    
    os.chdir(cwd)
